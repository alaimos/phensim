<?php

namespace App\Http\Controllers\Simulation;

use App\Http\Controllers\Controller;
use App\Models\Job;
use App\Models\Pathway;
use App\SIMPATHY\Reader;
use Datatables;
use Illuminate\Http\JsonResponse;
use Illuminate\View\View;
use Symfony\Component\HttpFoundation\BinaryFileResponse;

class SimulationController extends Controller
{
    /**
     * Create a new controller instance.
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Redirect to the real job viewer
     *
     * @param \App\Models\Job $job
     *
     * @return \Illuminate\View\View
     * @throws \Exception
     */
    public function viewSimulation(Job $job): View
    {
        if (!$job || !$job->exists) {
            abort(404, 'Unable to find the job.');
        }
        if (!$job->canBeRead()) {
            abort(403, 'You are not allowed to view this job');
        }
        return view('jobs.simulation_job.pathway_list', [
            'job' => $job,
        ]);
    }

    /**
     * Prepare data for the pathways list table
     *
     * @param \App\Models\Job $job
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function pathwaysListData(Job $job): JsonResponse
    {
        if (!$job || !$job->exists) {
            abort(404, 'Unable to find the job.');
        }
        if (!$job->canBeRead()) {
            abort(403, 'You are not allowed to view this job');
        }
        /** @var \Yajra\Datatables\Engines\CollectionEngine $table */
        $table = Datatables::of((new Reader($job))->readPathwaysList());
        $table->addColumn('action', function (array $data) use ($job) {
            return view('jobs.simulation_job.pathway_list_action_column', [
                'job'  => $job,
                'data' => $data,
            ])->render();
        })->rawColumns(['action']);
        return $table->make(true);
    }

    /**
     * Download data generated by a SIMPATHY simulation
     *
     * @param \App\Models\Job $job
     *
     * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
     */
    public function downloadData(Job $job): BinaryFileResponse
    {
        if (!$job || !$job->exists) {
            abort(404, 'Unable to find the job.');
        }
        if (!$job->canBeRead()) {
            abort(403, 'You are not allowed to view this job');
        }
        $fileName = (new Reader($job))->getOutputFilename();
        return response()->download($fileName, 'simpathy-output-' . $job->id . '.tsv');
    }

    /**
     * Redirect to the real job viewer
     *
     * @param \App\Models\Job $job
     * @param string          $pid
     *
     * @return \Illuminate\View\View
     */
    public function viewPathway(Job $job, string $pid): View
    {
        if (!$job || !$job->exists) abort(404, 'Unable to find the job.');
        if (!$job->canBeRead()) abort(403, 'You are not allowed to view this job');
        /** @var Pathway $pathway */
        $pathway = Pathway::whereAccession($pid)->first();
        if (!$pathway || !$pathway->exists) abort(404, 'Unable to find the pathway.');
        return view('jobs.simulation_job.pathway_view', [
            'job'     => $job,
            'pid'     => $pid,
            'pathway' => $pathway,
        ]);
    }

    /**
     * Prepare data for the nodes list table
     *
     * @param \App\Models\Job $job
     * @param string          $pid
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function pathwayViewListData(Job $job, string $pid): JsonResponse
    {
        if (!$job || !$job->exists) {
            abort(404, 'Unable to find the job.');
        }
        if (!$job->canBeRead()) {
            abort(403, 'You are not allowed to view this job');
        }
        /** @var \Yajra\Datatables\Engines\CollectionEngine $table */
        $table = Datatables::of((new Reader($job))->readPathway($pid));
        $table->editColumn('targetedBy', function (array $data) {
            return $data['isDirectTarget'] ? '' : $this->parseNode((array)$data['targetedBy']);
        })->editColumn('activityScore', function (array $data) {
            return number_format($data['activityScore'], 4);
        })->editColumn('pValue', function (array $data) {
            return number_format($data['pValue'], 4);
        })->editColumn('nodeId', function (array $data) {
            return $this->parseNode($data['nodeId']);
        })->editColumn('isEndpoint', function (array $data) {
            return ($data['isEndpoint'] ? 'Yes' : 'No');
        })->editColumn('isDirectTarget', function (array $data) {
            return ($data['isDirectTarget'] ? 'Yes' : 'No');
        })->rawColumns(['nodeId'])->removeColumn('ll', 'pathwayId', 'pathwayName');
        return $table->make(true);
    }


}
